<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sportstelling.user.dao.UserDAO">
	<!-- 회원가입 -->
	<insert id="insertSign" parameterType="map">
		INSERT INTO `user`
		(
			`loginId`
			, `password`
			, `name`
			, `nickName`
			, `email`
			, `createdAt`
			, `updatedAt`
		) VALUES (
			#{loginId }
			, #{password }
			, #{name }
			, #{nickName }
			, #{email }
			, now()
			, now()
		)
	</insert>
	<!-- ID 중복체크 -->
	<select id="selectCountById" resultType="int" parameterType="string">
		SELECT
			count(*)
		FROM
			`user`
		WHERE
			`loginId` = #{loginId }
	</select>
	<!-- 닉네임 중복체크 -->
	<select id="selectCountByNickName" resultType="int" parameterType="string">
		SELECT
			count(*)
		FROM
			`user`
		WHERE
			`nickName` = #{nickName }
	</select>
	<!-- 로그인 -->
	<select id="selectSignByLoginIdPassword" resultType="com.sportstelling.user.model.User"
	parameterType="map">
		SELECT
			`id`
			, `loginId`
			, `password`
			, `name`
			, `nickName`
			, `email`
			, `createdAt`
			, `updatedAt`
		FROM
			`user`
		WHERE
			`loginId` = #{loginId }
			AND `password` = #{password }
	</select>
	<!-- 아이디 찾기 -->
	<select id="selectByNameEmail" resultType="com.sportstelling.user.model.User" parameterType="string">
		SELECT
			`id`
			, `loginId`
			, `password`
			, `name`
			, `nickName`
			, `email`
			, `createdAt`
			, `updatedAt`
		FROM
			`user`
		WHERE
			`name` = #{name }
			AND `email` = #{email }
	</select>	
	<!-- 비밀번호 찾기 (loginId, email 일치여부) -->
	<select id="selectByLoginIdEmail" resultType="com.sportstelling.user.model.User" parameterType="string">
		SELECT
			`id`
			, `loginId`
			, `password`
			, `name`
			, `nickName`
			, `email`
			, `createdAt`
			, `updatedAt`
		FROM
			`user`
		WHERE
			`loginId` = #{loginId }
			AND `email` = #{email }
	</select>
	<!-- 임시 비밀번호 변경 -->
	<update id="updateUserPassword">
		UPDATE
			`user`
		SET
			`password` = #{password }
		WHERE
			`loginId` = #{loginId }
			AND `email` = #{email }
	</update>
	<!-- 이메일 전송을 위한 유저 정보 불러오기 -->
	<select id="selectUserByLoginId" resultType="com.sportstelling.user.model.User">
		SELECT
			`loginId`
			, `password`
			, `name`
			, `nickName`
			, `email`
			, `createdAt`
			, `updatedAt`
		FROM
			`user`
		WHERE
			`loginId` = #{loginId }
	</select>
	<!-- 정보 변경 -->
	<update id="updateUser">
		UPDATE
			`user`
		SET
			`password` = #{password }
			, `email` = #{email }
		WHERE
			`id` = #{id }
	</update>
	<!-- 회원 탈퇴 -->
	<delete id="deleteUser">
		DELETE
		FROM
			`user`
		WHERE
			`id` = #{id }
	</delete>
	<!-- 정보 변경을 위한 정보 불러오기 -->
	<select id="selectUserInformation" resultType="com.sportstelling.user.model.User">
		SELECT
			`loginId`
			, `password`
			, `name`
			, `nickName`
			, `email`
			, `createdAt`
			, `updatedAt`
		FROM
			`user`
		WHERE
			`loginId` = #{loginId }
	</select>
</mapper>